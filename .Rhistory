test_set[-3] = scale(test_set[-3])
setwd("C:/Users/SUSH/OneDrive/Machine Learning A-Z Template Folder/Part 10 - Model Selection & Boosting/Section 48 - Model Selection")
# k-Fold Cross Validation
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
View(test_set)
library(caret)
folds = createFolds(training_set$Purchased, k = 10)
cv = lapply(folds, function(x) {
training_fold = training_set[-x, ]
test_fold = training_set[x, ]
classifier = svm(formula = Purchased ~ .,
data = training_fold,
type = 'C-classification',
kernel = 'radial')
training_set$y_pred[x,] = predict(classifier, newdata = test_fold[-3])
# cm = table(test_fold[, 3], y_pred)
# accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
# return(accuracy)
})
folds = createFolds(training_set$Purchased, k = 10)
cv = lapply(folds, function(x) {
training_fold = training_set[-x, ]
test_fold = training_set[x, ]
classifier = svm(formula = Purchased ~ .,
data = training_fold,
type = 'C-classification',
kernel = 'radial')
training_set$y_pred[x, ] = predict(classifier, newdata = test_fold[-3])
# cm = table(test_fold[, 3], y_pred)
# accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
# return(accuracy)
})
View(training_set)
# Applying k-Fold Cross Validation
# install.packages('caret')
training_set$y_pred <- 0
View(training_set)
folds = createFolds(training_set$Purchased, k = 10)
cv = lapply(folds, function(x) {
training_fold = training_set[-x, ]
test_fold = training_set[x, ]
classifier = svm(formula = Purchased ~ .,
data = training_fold,
type = 'C-classification',
kernel = 'radial')
training_set$y_pred[x, ] = predict(classifier, newdata = test_fold[-3])
# cm = table(test_fold[, 3], y_pred)
# accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
# return(accuracy)
})
# k-Fold Cross Validation
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
folds = createFolds(training_set$Purchased, k = 10)
cv = lapply(folds, function(x) {
training_fold = training_set[-x, ]
test_fold = training_set[x, ]
classifier = svm(formula = Purchased ~ .,
data = training_fold,
type = 'C-classification',
kernel = 'radial')
training_set$y_pred[x, ] = predict(classifier, newdata = test_fold[-3])
# cm = table(test_fold[, 3], y_pred)
# accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(training_set)
})
folds = createFolds(training_set$Purchased, k = 10)
cv = lapply(folds, function(x) {
training_fold = training_set[-x, ]
test_fold = training_set[x, ]
classifier = svm(formula = Purchased ~ .,
data = training_fold,
type = 'C-classification',
kernel = 'radial')
training_set$y_pred[x] = predict(classifier, newdata = test_fold[-3])
# cm = table(test_fold[, 3], y_pred)
# accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(training_set)
})
folds = createFolds(training_set$Purchased, k = 10)
cv = lapply(folds, function(x) {
training_fold = training_set[-x, ]
test_fold = training_set[x, ]
classifier = svm(formula = Purchased ~ .,
data = training_fold,
type = 'C-classification',
kernel = 'radial')
training_set$y_pred[x] = predict(classifier, newdata = test_fold[-3])
# cm = table(test_fold[, 3], y_pred)
# accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(training_set)
})
# Applying k-Fold Cross Validation
# install.packages('caret')
training_set$y_pred <- 0
training_set$y_pred <- 0
library(caret)
folds = createFolds(training_set$Purchased, k = 10)
head(folds)
folds[1]
folds[[1]]
for(i in 1 : 10){
x <- folds[[i]]
training_fold = training_set[-x, ]
test_fold = training_set[x, ]
classifier = svm(formula = Purchased ~ .,
data = training_fold,
type = 'C-classification',
kernel = 'radial')
training_set$y_pred[x] = predict(classifier, newdata = test_fold[-3])
}
class(training_set[-4])
for(i in 1 : 10){
x <- folds[[i]]
training_fold = training_set[-x, ]
test_fold = training_set[x, ]
classifier = svm(formula = Purchased ~ .,
data = training_fold[-4],
type = 'C-classification',
kernel = 'radial')
training_set$y_pred[x] = predict(classifier, newdata = test_fold[-3])
}
table(training_set$Purchased , training_set$y_pred)
trying <- table(training_set$Purchased , training_set$y_pred)
# k-Fold Cross Validation
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
library(caret)
folds = createFolds(training_set$Purchased, k = 10)
cv = lapply(folds, function(x) {
training_fold = training_set[-x, ]
test_fold = training_set[x, ]
classifier = svm(formula = Purchased ~ .,
data = training_fold,
type = 'C-classification',
kernel = 'radial')
y_pred = predict(classifier, newdata = test_fold[-3])
cm = table(test_fold[, 3], y_pred)
accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
accuracy
trying
(178+96)/300
View(training_fold)
library(caret)
classifier = train(form = Purchased ~ ., data = training_set, method = 'svmRadial')
classifier
classifier$bestTune
43/83
0.6988-0.5882
0.7947 - 0.6988
40/48
18/26
18/35
?train
library(C50)
install.packages("C50")
library(C50)
data(churn)
View(churnTest)
# packages
library(tidyverse)
library(ggplot2)
library(randomForest)
library(forcats)
library(stringr)
library(caTools)
library(caret)
setwd("C:/Users/SUSH/Downloads/House Prediction")
train_data <- read_csv("train.csv")
test_data <- read_csv("test.csv")
View(test_data)
View(train_data)
class(train_data$MSSubClass)
train_data$SalePrice[which(MSSubClass == 20 | MSSubClass == 190)]
train_data$SalePrice[which(train_data$MSSubClass == 20 | train_data$MSSubClass == 190)]
train_data[which(train_data$MSSubClass == 20 | train_data$MSSubClass == 190), c(2,81)]
str(train_data)
unique(train_data$Alley)
?sample
?rmse
install.packages("rpart.plot")
?rpart.plot
library(rpart.plot)
?rpart.plot
?MAE
library(ModelMetrics)
?mae
str(train)
str(train)
str(train_data)
10e10
# packages
library(tidyverse)
library(randomForest)
library(caret)
train_data <- read_csv("train.csv")
test_data <- read_csv("test.csv")
?MAE
# packages
library(tidyverse)
library(randomForest)
library(caret)
train_data <- read_csv("train.csv")
test_data <- read_csv("test.csv")
train_data$Condition1 <- as.factor(train_data$Condition1)
test_data$Condition1 <- as.factor(test_data$Condition1)
#split your training data into test & training sets
rows <- sample(nrow(train_data))
train_data <- train_data[rows,]
split = nrow(train_data)*0.80
train <- train_data[1:split, ]
test<- train_data[(split+1):nrow(train_data), ]
model_rf <- randomForest(SalePrice ~ LotArea + YearBuilt +Condition1 + FullBath + BedroomAbvGr + TotRmsAbvGrd, train)
pred <- predict(model_rf, test)
mae <- MAE(pred, test$SalePrice)
mae
test_data$SalePrice <- predict(model_rf, test_data)
submission <- test_data %>% select(Id, SalePrice)
?write_csv
write_csv(submission, "House_pricePred")
train_data <- read_csv("train.csv")
test_data <- read_csv("test.csv")
test_data$SalePrice <- NA
train_data$type <- "training_set"
test_data$type <- "test_set"
dataset <- rbind(train_data, test_data)
dataset$Condition1 <- as.factor(dataset$Condition1)
str(dataset)
library(corrplot)
install.packages(corrplot)
install.packages"(corrplot")
install.packages("corrplot")
library(corrplot)
?cor
cor_var <- cor(train_data, use = "pairwise.complete.obs")
dataset <- rbind(train_data, test_data)
# finding the number of numeric columns
num_col <- which(apply(train_data, 2, is.numeric))
train_data_num <- train_data[, num_col]
num_col
# finding the number of numeric columns
num_col <- which(apply(train_data, 2, is.numeric))
num_col
# finding the number of numeric columns
num_col <- which(sapply(train_data,is.numeric))
num_col
sapply(train_data, is.numeric)
class(sapply(train_data, is.numeric))
dim(sapply(train_data, is.numeric))
num_colNames <- names(num_col)
num_col <- which(sapply(train_data,is.numeric))  # index of the numerical column
train_data_num <- train_data[, num_col]
num_colNames <- names(num_col)
corVar <- cor(train_data_num, use = "pairwise.complete.obs")
corrplot(corVar)
summary(corVar)
corVar
class(corVar)
class(sort(corVar[,"SalePrice"], decreasing = TRUE))
sort(corVar[,"SalePrice"], decreasing = TRUE)
as.matrix(sort(corVar[,"SalePrice"], decreasing = TRUE))
corVar_High <- names(which(apply(corVar_Sorted, 1 , function(x) abs(x)>0.5)))
corVar_Sorted <- as.matrix(sort(corVar[,"SalePrice"], decreasing = TRUE))
corVar_High <- names(which(apply(corVar_Sorted, 1 , function(x) abs(x)>0.5)))
corVar <- corVar[corVar_High, corVar_High]
corrplot(corVar)
corrplot(corVar, tl.col = "black", method = "circle")
corrplot(corVar, tl.col = "black", method = "square")
corrplot(corVar, tl.col = "black", method = "number")
corrplot(corVar, tl.col = "black", method = c("number", "square"), type = c("lower", "upper"), title = "Correlation plot", )
corrplot(corVar, tl.col = "black", method = c("number", "square"), type = c("lower", "upper"), title = "Correlation plot" )
corrplot.mixed(corVar, tl.col = "black", upper = "square", tl.pos = "d")
corrplot.mixed(corVar, tl.col = "black", upper = "circle", tl.pos = "ld")
corrplot.mixed(corVar, tl.col = "black", upper = "circle", tl.pos = "ld")
corrplot.mixed(corVar, tl.col = "black", upper = "circle", tl.pos = "n")
corrplot.mixed(corVar, tl.col = "black", upper = "circle", tl.pos = "td")
corrplot.mixed(corVar, tl.col = "black", upper = "circle", tl.pos = "lt")
ggplot(data=dataset[!is.na(all$SalePrice),], aes(x=factor(OverallQual), y=SalePrice))+
geom_boxplot(col='blue') + labs(x='Overall Quality') +
scale_y_continuous(breaks= seq(0, 800000, by=100000), labels = comma)
ggplot(data=dataset[!is.na(dataset$SalePrice),], aes(x=factor(OverallQual), y=SalePrice))+
geom_boxplot(col='blue') + labs(x='Overall Quality') +
scale_y_continuous(breaks= seq(0, 800000, by=100000), labels = comma)
ggplot(data=dataset[!is.na(dataset$SalePrice),], aes(x=factor(OverallQual), y=SalePrice))+
geom_boxplot(col='blue') + labs(x='Overall Quality') +
scale_y_continuous(breaks= seq(0, 800000, by=100000), labels = "comma")
ggplot(data=dataset[!is.na(dataset$SalePrice),], aes(x=factor(OverallQual), y=SalePrice))+
geom_boxplot(col='blue') + labs(x='Overall Quality')
ggplot(data=dataset[!is.na(dataset$SalePrice),], aes(x=factor(OverallQual), y=SalePrice))+
geom_boxplot(col='blue') + labs(x='Overall Quality') +
scale_y_continuous(breaks= seq(0, 800000, by=100000))
ggplot(data=dataset[!is.na(dataset$SalePrice),], aes(x=factor(OverallQual), y=SalePrice))+
geom_boxplot(col='blue') + labs(x='Overall Quality') +
scale_y_continuous(breaks= seq(0, 800000, by=100000), labels = waiver())
ggplot(data=dataset[!is.na(dataset$SalePrice),], aes(x=factor(OverallQual), y=SalePrice))+
geom_boxplot(col='blue') + labs(x='Overall Quality') +
scale_y_continuous(breaks= seq(0, 800000, by=100000), label = comma)
ggplot(data=dataset[!is.na(dataset$SalePrice),], aes(x=factor(OverallQual), y=SalePrice))+
geom_boxplot(col='blue') + labs(x='Overall Quality') +
scale_y_continuous(breaks= seq(0, 800000, by=100000), labels = comma)
library(scales)
ggplot(data=dataset[!is.na(dataset$SalePrice),], aes(x=factor(OverallQual), y=SalePrice))+
geom_boxplot(col='blue') + labs(x='Overall Quality') +
scale_y_continuous(breaks= seq(0, 800000, by=100000), label = comma)
is.na(dataset)
NAcol <- which(colSums(is.na(dataset))>0)
NAcol
as.data_frame(NAcol)
as.data.frame(NAcol)
remove(NAcol)
missingCol <- which(colSums(is.na(dataset))>0)
colSums(is.na(dataset))
sapply(dataset[missingCol], is.na)
is.na(dataset)
colSums(is.na(dataset))
sort(colSums(sapply(dataset[missingCol], is.na)), decreasing = TRUE)
length(missingCol)
dataset$Condition1 <- as.factor(dataset$Condition1)
summary(dataset$PoolQC)
unique(dataset$PoolQC)
dataset$PoolQC[is.na(dataset$PoolQc)] <- "None"
dataset$PoolQC[is.na(dataset$PoolQc)] <- 'None'
dataset$PoolQC[is.na(dataset$PoolQC)] <- 'None'
missingCol <- which(colSums(is.na(dataset))>0)
sort(colSums(sapply(dataset[missingCol], is.na)), decreasing = TRUE)
length(missingCol)
dataset$PooQC <- factor(dataset$PoolQC , labels = c("None", "Fa", "Gd", "Ex"), levels = c(0,1,2,3), ordered = TRUE)
str(dataset$PoolQC)
dataset$PoolQC <- factor(dataset$PoolQC , labels = c("None", "Fa", "Gd", "Ex"), levels = c(0,1,2,3), ordered = TRUE)
str(dataset$PoolQC)
is.na(dataset$PoolQC)
dataset$PoolQC[is.na(dataset$PoolQC)] <- 'None'
dataset$PoolQC <- factor(dataset$PoolQC , labels = c("None", "Fa", "Gd", "Ex"), levels = c(0,1,2,3), ordered = TRUE)
str(dataset$PoolQC)
unique(datset$PoolQC)
unique(dataset$PoolQC)
sum(is.na(dataset$PoolQC))
dataset$PoolQC[is.na(dataset$PoolQC)] <- "None"
dataset$PoolQC <- factor(dataset$PoolQC , labels = c("None", "Fa", "Gd", "Ex"), levels = c(0,1,2,3), ordered = TRUE)
sum(is.na(dataset$PoolQC))
missingCol <- which(colSums(is.na(dataset))>0)
sort(colSums(sapply(dataset[missingCol], is.na)), decreasing = TRUE)
summary(dataset$PoolQC)
# packages
library(tidyverse)
library(randomForest)
library(caret)
library(corrplot)
library(scales)
#Loading Data and combining train and test dataset
train_data <- read_csv("train.csv")
test_data <- read_csv("test.csv")
test_data$SalePrice <- NA
train_data$type <- "training_set"
test_data$type <- "test_set"
dataset <- rbind(train_data, test_data)
missingCol <- which(colSums(is.na(dataset))>0)
sort(colSums(sapply(dataset[missingCol], is.na)), decreasing = TRUE)
length(missingCol)
unique(dataset$PoolQC)
dataset$PoolQC[is.na(dataset$PoolQC)] <- "None"
unique(dataset$PoolQC)
missingCol <- which(colSums(is.na(dataset))>0)
sort(colSums(sapply(dataset[missingCol], is.na)), decreasing = TRUE)
dataset$PoolQC <- factor(dataset$PoolQC , levels = c("None", "Fa", "Gd", "Ex"), labels = c(0,1,2,3), ordered = TRUE)
unique(dataset$PoolQC)
which[colnames(dataset) == "PooQC"]
which[colnames(dataset) = "PooQC"]
which[colnames(dataset) = "PooQC"]
colnames(dataset)
which[colnames(dataset) = "PoolQC"]
which[colnames(dataset) == "PoolQC"]
which[as.data.frame(colnames(dataset)) == "PoolQC"]
as.data.frame(colnames(dataset))
which[as.data.frame(colnames(dataset))["colnames(dataset)"] == "PoolQC"]
which(colnames(dataset) = "PoolQC")
which(colnames(dataset) == "PoolQC")
ggplot(data = dataset, aes(x = PoolArea))+
geom_density()
ggplot(data = dataset, aes(x = PoolArea))+
geom_histogram()
ggplot(data = dataset, aes(x = PoolArea))+
geom_histogram(binwidth = 30)
ggplot(data = dataset, aes(x = PoolArea))+
geom_histogram(binwidth = 5)
ggplot(data = dataset, aes(x = PoolArea))+
geom_histogram(binwidth = 1)
ggplot(data = dataset, aes(x = dataset$PoolArea))+
geom_histogram(binwidth = 1)
ggplot(data = dataset, aes(x = dataset$PoolArea))+
geom_histogram(binwidth = 100)
PoolQC
dataset[dataset$PoolArea >0 & dataset$PoolQC == 0, c("PoolArea", "PoolQC", "OverallQual")]
dataset[dataset$PoolArea == 0 & dataset$PoolQC == 1, c("PoolArea", "PoolQC", "OverallQual")]
dataset[dataset$PoolArea == 0 & dataset$PoolQC == 2, c("PoolArea", "PoolQC", "OverallQual")]
dataset[dataset$PoolArea == 0 & dataset$PoolQC == 3, c("PoolArea", "PoolQC", "OverallQual")]
dataset[dataset$PoolArea == 0 & dataset$PoolQC == 0, c("PoolArea", "PoolQC", "OverallQual")]
ggplot(dataset, aes(x = PoolArea))+
geom_bar()
head(dataset$PoolArea)
ggplot(dataset, aes(x = PoolArea))+
geom_bar()+
scale_y_continuous(ylim = c(0,20))
ggplot(dataset, aes(x = PoolArea))+
geom_bar()+
ylim(0,100)
ggplot(dataset, aes(x = PoolArea))+
geom_histogram()+
ylim(0,50)
ggplot(dataset, aes(x = PoolArea))+
geom_point()+
ylim(0,50)
ggplot(dataset, aes(x = PoolArea))+
geom_bar()+
ylim(0,50)
ggplot(dataset, aes(x = PoolArea))+
geom_bar()+
ylim(0,5)
ggplot(dataset, aes(x = PoolArea))+
geom_bar(aes(col = PoolQC))+
ylim(0,5)
ggplot(dataset, aes(x = PoolArea))+
geom_bar(aes(fill = PoolQC))+
ylim(0,5)
ggplot(dataset, aes(x = PoolArea))+
geom_bar(aes(fill = PoolQC), binwidth = 10)+
ylim(0,5)
ggplot(dataset, aes(x = PoolArea))+
geom_bar(aes(fill = PoolQC), binwidth = 10)+
ylim(0,100)
ggplot(dataset, aes(x = PoolArea))+
geom_bar(aes(fill = PoolQC), binwidth = 10)
sum(is.na(dataset$PoolArea))
sum(is.na(dataset$PoolQC))
sum(!is.na(dataset$PoolArea))
dataset[dataset$PoolArea > 0 & dataset$PoolQC == 0, c("PoolArea", "PoolQC", "OverallQual")]
dataset[dataset$PoolArea > 0 & dataset$PoolQC == 0, c('PoolArea', 'PoolQC', 'OverallQual')]
index <- which(dataset$PoolArea > 0 & dataset$PoolQC == 0)
dataset$PoolArea[index] <- 0
dataset[dataset$PoolArea > 0 & dataset$PoolQC == 0, c('PoolArea', 'PoolQC', 'OverallQual')]
sort(colSums(sapply(dataset[missingCol], is.na)), decreasing = TRUE)
# Looking at MiscFeature variable
unique(dataset$MiscFeature)
dataset$MiscFeature[is.na(dataset$MiscFeature)] <- "None"
dataset$MiscFeature <- as.factor(dataset$MiscFeature)
ggplot(dataset[!is.na(dataset$SalePrice),], aes(x = MiscFeature, y = SalePrice)) +
geom_col()
ggplot(dataset[!is.na(dataset$SalePrice),], aes(x = MiscFeature, y = SalePrice)) +
geom_col()+
scale_y_continuous(breaks = seq(0,800000, by = 100000), labels = comma)
ggplot(dataset[!is.na(dataset$SalePrice),], aes(x = MiscFeature, y = SalePrice)) +
geom_col()
ggplot(all[!is.na(dataset$SalePrice),], aes(x=MiscFeature, y=SalePrice)) +
geom_bar(stat='summary', fun.y = "median", fill='blue') +
scale_y_continuous(breaks= seq(0, 800000, by=100000), labels = comma) +
geom_label(stat = "count", aes(label = ..count.., y = ..count..))
ggplot(dataset[!is.na(dataset$SalePrice),], aes(x=MiscFeature, y=SalePrice)) +
geom_bar(stat='summary', fun.y = "median", fill='blue') +
scale_y_continuous(breaks= seq(0, 800000, by=100000), labels = comma) +
geom_label(stat = "count", aes(label = ..count.., y = ..count..))
ggplot(dataset[!is.na(dataset$SalePrice),], aes(x = MiscFeature, y = SalePrice)) +
geom_col()+
scale_y_continuous(breaks = seq(0,800000, by = 100000), labels = comma)
ggplot(dataset[!is.na(dataset$SalePrice),], aes(x = MiscFeature, y = SalePrice)) +
geom_col()+
scale_y_continuous(breaks = seq(0,800000000, by = 100000), labels = comma)
ggplot(dataset[!is.na(dataset$SalePrice),], aes(x = MiscFeature, y = SalePrice)) +
geom_col()+
scale_y_continuous(breaks = seq(0,200000000, by = 10000000), labels = comma)
